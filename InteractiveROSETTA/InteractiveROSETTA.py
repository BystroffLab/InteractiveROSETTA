# ================================================================================================================
# DSSP License Agreement
#
# Boost Software License - Version 1.0 - August 17th, 2003 Permission is hereby granted, free of charge, 
# to any person or organization obtaining a copy of the software and accompanying documentation covered 
# by this license (the "Software") to use, reproduce, display, distribute, execute, and transmit the 
# Software, and to prepare derivative works of the Software, and to permit third-parties to whom the 
# Software is furnished to do so, all subject to the following: 
#
# The copyright notices in the Software and this entire statement, including the above license grant, this 
# restriction and the following disclaimer, must be included in all copies of the Software, in whole or 
# in part, and all derivative works of the Software, unless such copies or derivative works are solely in 
# the form of machine-executable object code generated by a source language processor. 
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. 
# IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
# OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ================================================================================================================
# MUSCLE Public Domain Notice
#
# The MUSCLE software, including object and source code and documentation, is hereby donated to the public domain. 
#
# Disclaimer of warranty
# THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT 
# LIMITATION IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
# ================================================================================================================
# BioPython License
#
# Permission to use, copy, modify, and distribute this software and its
# documentation with or without modifications and for any purpose and
# without fee is hereby granted, provided that any copyright notices
# appear in all copies and that both those copyright notices and this
# permission notice appear in supporting documentation, and that the
# names of the contributors or copyright holders not be used in
# advertising or publicity pertaining to distribution of the software
# without specific prior permission.

# THE CONTRIBUTORS AND COPYRIGHT HOLDERS OF THIS SOFTWARE DISCLAIM ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE
# CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT
# OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
# OR PERFORMANCE OF THIS SOFTWARE.
# ================================================================================================================
# wxPython License
#
# WXWINDOWS LIBRARY LICENCE 
# TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 
#
# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General 
# Public Licence as published by the Free Software Foundation; either version 2 of the Licence, or (at your option) 
# any later version. 
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public Licence for more details. 
#
# You should have received a copy of the GNU Library General Public Licence along with this software, usually in a file named 
# COPYING.LIB. If not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. 
# 
# EXCEPTION NOTICE 
#
# 1. As a special exception, the copyright holders of this library give permission for additional uses of the text contained 
# in this release of the library as licenced under the wxWindows Library Licence, applying either version 3 of the Licence, 
# or (at your option) any later version of the Licence as published by the copyright holders of version 3 of the Licence document. 
#
# 2. The exception is that you may use, copy, link, modify and distribute under the user's own terms, binary object code 
# versions of works based on the Library. 
#
# 3. If you copy code from files distributed under the terms of the GNU General Public Licence or the GNU Library General 
# Public Licence into a copy of this library, as this licence permits, the exception does not apply to the code that you add 
# in this way. To avoid misleading anyone as to the status of such modified files, you must delete this exception notice from 
# such code and/or adjust the licensing conditions notice accordingly. 
#
# 4. If you write modifications of your own for this library, it is your choice whether to permit this exception to apply to 
# your modifications. If you do not wish that, you must delete the exception notice from such code and/or adjust the licensing 
# conditions notice accordingly.
# ================================================================================================================
# Open Source Software Used
#
# PyMOL (Open Source Version Used)
# OpenBabel

def cleanUp():
    # Delete any input/output files from a last run because if these are still hanging around from
    # last time they can really screw things up
    goToSandbox()
    if (os.path.isfile("minimizeinput")):
	os.remove("minimizeinput")
    if (os.path.isfile("minimizeoutput")):
	os.remove("minimizeoutput")
    if (os.path.isfile("designinput")):
	os.remove("designinput")
    if (os.path.isfile("designoutput")):
	os.remove("designoutput")
    if (os.path.isfile("scoreinput")):
	os.remove("scoreinput")
    if (os.path.isfile("scoreoutput")):
	os.remove("scoreoutput")
    if (os.path.isfile("rotamerinput")):
	os.remove("rotamerinput")
    if (os.path.isfile("rotameroutput")):
	os.remove("rotameroutput")
    if (os.path.isfile("coarsekicinput")):
	os.remove("coarsekicinput")
    if (os.path.isfile("coarsekicoutput")):
	os.remove("coarsekicoutput")
    if (os.path.isfile("kicoutput")):
	os.remove("kicoutput")
    if (os.path.isfile("repackme.pdb")):
	os.remove("repackme.pdb")
    if (os.path.isfile("finekicinput")):
	os.remove("finekicinput")
    if (os.path.isfile("errreport")):
	os.remove("errreport")
    if (os.path.isfile("coarsedockinput")):
	os.remove("coarsedockinput")
    if (os.path.isfile("finedockinput")):
	os.remove("finedockinput")
    if (os.path.isfile("dockoutput")):
	os.remove("dockoutput")
    if (os.path.isfile("dock_progress")):
	os.remove("dock_progress")
    if (os.path.isfile("threadinput")):
	os.remove("threadinput")
    if (os.path.isfile("threadoutput")):
	os.remove("threadoutput")
    tempfiles = glob.glob("*temp")
    for tempfile in tempfiles:
	try:
	    os.remove(tempfile)
	except:
	    pass
    # Remove the sandbox PDBs
    tempfiles = glob.glob("*.pdb")
    for tempfile in tempfiles:
	os.remove(tempfile)

if (__name__ == "__main__"):
    import wx
    import wx.grid
    import wx.lib.scrolledpanel
    import os
    import os.path
    import sys
    import platform
    import __main__
    import time
    import psutil
    import glob
    from threading import Thread
    import multiprocessing

    # Change the directory to the one the InteractiveROSETTA.py script is in
    scriptdir = os.getcwd()
    if (platform.system() == "Windows"):
	indx = sys.argv[0].rfind("\\")
    else:
	indx = sys.argv[0].rfind("/")
    if (indx >= 0):
	tempdir = sys.argv[0][0:indx]
    else:
	tempdir = ""
    if (platform.system() == "Windows" and len(tempdir) > 1 and (tempdir[0:2] == "C:" or tempdir[0] == "\\")):
	scriptdir = tempdir
    elif ((platform.system() == "Darwin" or platform.system() == "Linux") and len(tempdir) > 0 and tempdir[0] == "/"):
	scriptdir = tempdir
    elif (platform.system() == "Windows"):
	scriptdir = scriptdir + "\\" + tempdir
    else:
	scriptdir = scriptdir + "/" + tempdir
    os.chdir(scriptdir)
    
    app = wx.App()
    # Check to see if the License has been accepted
    f = open("InteractiveROSETTA.py", "r")
    license_accepted = 0
    for aline in f:
	if ("### LICENSE ACCEPTED ###" in aline):
	    license_accepted = license_accepted + 1
    f.close()
    if (license_accepted < 3):
	# Make sure we are root on OSX/Linux
	if (platform.system() != "Windows" and os.getuid() != 0 and not(os.access("InteractiveROSETTA.py", os.W_OK))):
	    print "You have not accepted the license agreement yet."
	    print "Please run InteractiveROSETTA as root to accept it."
	    dlg2 = wx.MessageDialog(None, "You have not accepted the license agreement yet.\nPlease run InteractiveROSETTA as root to accept it.\nOpen a terminal and run InteractiveROSETTA as root: sudo python /usr/local/InteractiveROSETTA/InteractiveROSETTA.py", "Run as Root to Accept License", wx.OK | wx.ICON_EXCLAMATION | wx.CENTRE)
	    dlg2.ShowModal()
	    exit()
	if (platform.system() == "Windows"):
	    f = open("LICENSE.txt", "r")
	else:
	    f = open("LICENSE", "r")
	licensetext = ""
	for aline in f:
	    licensetext = licensetext + aline.strip() + "\n"
	    print aline.strip()
	f.close()
	print ""
	licensetext = licensetext + "\nDo you accept the license agreement?"
	dlg = wx.MessageDialog(None, licensetext, "InteractiveROSETTA License", wx.YES_NO | wx.ICON_QUESTION | wx.CENTRE)
	print "Do you accept the license agreement? (Yes/No)"
	if (dlg.ShowModal() == wx.ID_YES):
	    try:
		f = open("InteractiveROSETTA.py", "a")
		f.write("### LICENSE ACCEPTED ###")
		f.close()
		dlg2 = wx.MessageDialog(None, "License agreement accepted!\nRerun InteractiveROSETTA to begin using it!", "InteractiveROSETTA License Accepted", wx.OK | wx.ICON_EXCLAMATION | wx.CENTRE)
		dlg2.ShowModal()
		print "\nLicense agreement accepted!\nRerun InteractiveROSETTA to begin using it!"
	    except:
		# The script is in a global place and was not run with root/Administrator privileges
		print "We were unable to acknowledge the license acceptance."
		if (platform.system() == "Windows"):
		    print "Did you run this program as the Administrator?"
		    print "Right click on \"InteractiveROSETTA.bat\" and click \"Run as Administrator\""
		    dlg2 = wx.MessageDialog(None, "We were unable to acknowledge the license acceptance.\n\nDid you run this program as the Administrator?\nRight click on the shortcut and select \"Run as Administrator\"", "InteractiveROSETTA License Error", wx.OK | wx.ICON_EXCLAMATION | wx.CENTRE)
		    dlg2.ShowModal()
		elif (platform.system() == "Darwin"):
		    print "Did you run this program as root?"
		    print "Open a terminal and run InteractiveROSETTA as root: sudo /Applications/InteractiveROSETTA.app/Contents/MacOS/InteractiveROSETTA"
		    dlg2 = wx.MessageDialog(None, "We were unable to acknowledge the license acceptance.\n\nDid you run this program as root?\nOpen a terminal and run InteractiveROSETTA as root: sudo /Applications/InteractiveROSETTA.app/Contents/MacOS/InteractiveROSETTA", "InteractiveROSETTA License Error", wx.OK | wx.ICON_EXCLAMATION | wx.CENTRE)
		    dlg2.ShowModal()
		else:
		    print "Did you run this program as root?"
		    print "Open a terminal and run InteractiveROSETTA as root: sudo python /usr/local/InteractiveROSETTA/InteractiveROSETTA.py"
		    dlg2 = wx.MessageDialog(None, "We were unable to acknowledge the license acceptance.\n\nDid you run this program as root?\nOpen a terminal and run InteractiveROSETTA as root: sudo python /usr/local/InteractiveROSETTA/InteractiveROSETTA.py", "InteractiveROSETTA License Error", wx.OK | wx.ICON_EXCLAMATION | wx.CENTRE)
		    dlg2.ShowModal()
	    exit()
	else:
	    exit()
	    
    from scripts.daemon import daemonLoop
    from scripts.tools import goToSandbox
    from scripts.sequence import SequenceWin
    from scripts.protocols import *
    from scripts.tools import startNewLog
    
    if (platform.system() == "Windows"):
	# To get the OpenBabel path for the Residue/Ligand creator
	sys.path.append(scriptdir + "\\data\\OpenBabel")

    # Check to see if an instance of InteractiveROSETTA is already running
    # If it is, then abort because we should only have one instance (GUI+daemon) running at a time
    count = 0
    for proc in psutil.process_iter():
	try:
	    if (len(proc.cmdline()) >= 2 and proc.cmdline()[0].find("python") >= 0 and proc.cmdline()[1].find("InteractiveROSETTA.py") >= 0):
		count = count + 1
	except:
	    # In Windows it will crash if you try to read process information for the Administrator
	    # Doesn't matter though since InteractiveROSETTA is run by a non-Administrator
	    # But we need to catch these errors since we don't know which processes are admin ones
	    pass
    if (count != 1 and False):
	exit()

    homedir = os.path.expanduser("~")
    cwd = homedir
    if (platform.system() == "Windows"):
	if (not(os.path.exists(homedir + "\\InteractiveROSETTA"))):
	    os.makedirs(homedir + "\\InteractiveROSETTA")
    else:
	if (not(os.path.exists(homedir + "/InteractiveROSETTA"))):
	    os.makedirs(homedir + "/InteractiveROSETTA")
    if (platform.system() == "Windows"):
	if (not(os.path.exists(homedir + "\\InteractiveROSETTA\\params"))):
	    os.makedirs(homedir + "\\InteractiveROSETTA\\params")
	# We only need to do waters on Windows because PyRosetta automatically gets the metals
	# on Windows
	water = os.environ["PYROSETTA_DATABASE"] + "\\chemical\\residue_type_sets\\fa_standard\\residue_types\\water\\HOH.params"
	if (not(os.path.isfile(homedir + "\\InteractiveROSETTA\\params\\HOH.fa.params"))):
	    f = open(water, "r")
	    f2 = open(homedir + "\\InteractiveROSETTA\\params\\HOH.fa.params", "w")
	    for aline in f:
		f2.write(aline.strip() + "\n")
	    f2.close()
	    f.close()
    else:
	if (not(os.path.exists(homedir + "/InteractiveROSETTA/params"))):
	    os.makedirs(homedir + "/InteractiveROSETTA/params")
	# Now let's take the metal ions and waters that Rosetta already provides, just because
	# these HETATMS are so common
	water = os.environ["PYROSETTA_DATABASE"] + "/chemical/residue_type_sets/fa_standard/residue_types/water/HOH.params"
	if (not(os.path.isfile(homedir + "/InteractiveROSETTA/params/HOH.fa.params"))):
	    f = open(water, "r")
	    f2 = open(homedir + "/InteractiveROSETTA/params/HOH.fa.params", "w")
	    for aline in f:
		f2.write(aline.strip() + "\n")
	    f2.close()
	    f.close()
    if (platform.system() == "Windows"):
	if (not(os.path.exists(homedir + "\\InteractiveROSETTA\\data"))):
	    os.makedirs(homedir + "\\InteractiveROSETTA\\data")
	# Copy over the residue factory PDB
	if (not(os.path.isfile(homedir + "\\InteractiveROSETTA\\data\\residues.pdb"))):
	    f = open("data\\residues.pdb", "r")
	    f2 = open(homedir + "\\InteractiveROSETTA\\data\\residues.pdb", "w")
	    for aline in f:
		f2.write(aline)
	    f.close()
	    f2.close()
	if (not(os.path.isfile(homedir + "\\InteractiveROSETTA\\data\\bigPDB.pdb"))):
	    # Copy over the initializer PDB
	    f = open("data\\bigPDB.pdb", "r")
	    f2 = open(homedir + "\\InteractiveROSETTA\\data\\bigPDB.pdb", "w")
	    for aline in f:
		f2.write(aline)
	    f.close()
	    f2.close()
    else:
	if (not(os.path.exists(homedir + "/InteractiveROSETTA/data"))):
	    os.makedirs(homedir + "/InteractiveROSETTA/data")
	# Copy over the residue factory PDB
	if (not(os.path.isfile(homedir + "/InteractiveROSETTA/data/residues.pdb"))):
	    f = open("data/residues.pdb", "r")
	    f2 = open(homedir + "/InteractiveROSETTA/data/residues.pdb", "w")
	    for aline in f:
		f2.write(aline)
	    f.close()
	    f2.close()
	if (not(os.path.isfile(homedir + "/InteractiveROSETTA/data/bigPDB.pdb"))):
	    # Copy over the initializer PDB
	    f = open("data/bigPDB.pdb", "r")
	    f2 = open(homedir + "/InteractiveROSETTA/data/bigPDB.pdb", "w")
	    for aline in f:
		f2.write(aline)
	    f.close()
	    f2.close()
    frozen = False
    poses = []
    sequences = []
    IDs = []

    screenW = wx.GetDisplaySize()[0]
    screenH = wx.GetDisplaySize()[1]
    if (platform.system() == "Windows"):
	splashImage = wx.Bitmap("images\\splash.png", wx.BITMAP_TYPE_PNG)
    else:
	splashImage = wx.Bitmap("images/splash.png", wx.BITMAP_TYPE_PNG)
    splash = wx.SplashScreen(splashImage, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_NO_TIMEOUT, 10000, None, style=wx.FRAME_NO_TASKBAR)
    wx.Yield()

    #if (platform.system() == "Windows"):
    pymolw = screenW - 370
    pymolh = screenH - 340
    pymolx = 370
    pymoly = 0
    try:
	if (platform.system() == "Windows"):
	    f = open(homedir + "\\InteractiveROSETTA\\seqwindow.cfg", "r")
	else:
	    f = open(homedir + "/InteractiveROSETTA/seqwindow.cfg", "r")
	for aline in f:
	    if (aline.find("[OFFSET X]") >= 0):
		pymolx = pymolx + int(aline.split()[len(aline.split())-1])
	    elif (aline.find("[OFFSET PHEIGHT]") >= 0):
		pymolh = pymolh + int(aline.split()[len(aline.split())-1])
	    elif (aline.find("[OFFSET PWIDTH]") >= 0):
		pymolw = pymolw + int(aline.split()[len(aline.split())-1])
	f.close()
    except:
	pass
    if (pymolx > screenW - 100):
	pymolx = 370
    if (pymoly > screenH - 100):
	pymoly = screenH - 340
    pymolx = str(pymolx)
    pymoly = str(pymoly)
    pymolw = str(pymolw)
    pymolh = str(pymolh)
    #else:
	#pymolw = str(screenW - 390)
	#pymolh = str(screenH - 340)
	#pymolx = "375"
	#pymoly = "0"

    __main__.pymol_argv = ["pymol", "-qxi", "-W", pymolw, "-H", pymolh, "-X", pymolx, "-Y", pymoly]
    import pymol
    #from rosetta import *
    
    # Grab the params files in the user's personal directory
    olddir = os.getcwd()
    #initRosetta()
    cleanUp()
    # Start a new log for this session
    startNewLog()
    os.chdir(olddir)
    
    SequenceFrame = SequenceWin(screenW, screenH, cwd, frozen, poses, sequences, IDs, scriptdir)
    ProtocolsFrame = ProtocolsWin(screenW, screenH, scriptdir)
    pymol.finish_launching()
    pymol.cmd.set("label_size", 28)

    SequenceFrame.setPyMOL(pymol)
    ProtocolsFrame.Selection.setPyMOL(pymol)
    ProtocolsFrame.Protocols.setPyMOL(pymol)
    ProtocolsFrame.setSeqWin(SequenceFrame)
    SequenceFrame.setProtWin(ProtocolsFrame)
    splash.Destroy()
    app.MainLoop()
